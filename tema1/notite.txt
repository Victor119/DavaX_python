FLTK output

Fl_Multiline_Output -> Fl_Output -> Fl_Input -> Fl_Input_ -> Fl_Widget


Asocierea view-controller

class MyRadioButton : Fl_Radio_Round_Button { 
 public: 
  ... 
  void setController(Controller *aCntrl); 
 private: 
  ... 
  Controller *controller; 
}; 
 
class MyRadioGroup : Fl_Group { 
 public: 
   void setController(Controller *aCntrl); 
  ... 
};

void MyRadioButton::radio_button_cb(MyRadioButton *b,  
                                                              void *) { 
  b->controller->chControl(std::string(b->label())); 
} 
 
 
void MyRadioGroup::setController(Controller *aCntrl) { 
    int i; 
    for (i = 0; i < noOfElts; ++i) 
      elts[i]->setController(aCntrl); 
} 

Model model(-1, "nothing"); 
  Controller chCntrl; 
  model.setChView(adb); 
  chCntrl.setModel(&model); 
  rg->setController(&chCntrl);



My Input
class MyEditBox : public Fl_Multiline_Input { 
 public: 
 MyEditBox(Point pos, int w, int h, char * label) : 
Fl_Multiline_Input(pos.getX(), pos.getY(), w, h, label) { 
    this->tooltip("Input field for short text with newlines."); 
    this->wrap(1); 
    //    this->when(0); 
    this->when(FL_WHEN_RELEASE); 
    this->callback((Fl_Callback*) input_cb); 
    this->show(); 
  }

private: 
  MyDisplayBox *controller; 
  static void input_cb(MyEditBox *eb, void *) { } 
};

Point posEB(350, 150); 
MyEditBox *eb = new MyEditBox(posEB, 150, 100, (char *) "&My Input");



ca sa vedem cum poate fi utlizat textul introdus, extindem 
modelul cu 
• capabilitatea de a memora si ultimul text intrat in 
fereastra de input 
l adaugam doua MyDisplayBox: 
•  unul pentru ultimul buton radio ales 
• unul pentru text introdus  
  Point posSndDB(375, 50); 
  MyDisplayBox *snddb = new MyDisplayBox(...); 
  snddb->setText("My second output text."); 
 
  Point posTrdDB(200, 275); 
  MyDisplayBox *trddb = new MyDisplayBox(...); 
  trddb->setText("My third output text.");


class Model { 
 public: 
  ... 
  void setLastInput(std::string inp);  
  void setInpView(MyDisplayBox *db);  
 private: 
  ... 
  std::string lastInput; 
  MyDisplayBox *chView, *inpView; 
};

void Model::notify() const { 
  chView->setText(std::string("Last choice is ") +  
                              std::to_string(lastChoice)); 
  inpView->setText(std::string("Last input is `") +  
                               lastInput + std::string("`")); 
}

class Controller { 
 public: 
  ... 
  void inpControl(std::string  aString); //aplica actiunea din GUI peste model 
private: 
  ... 
};

//Noua colaborarea model-controller-view

eb->setController(&chCntrl); // relatia view (GUI) - controller

model.setInpView(snddb);

model.setChView(trddb); // relatia model - view (GUI)

pentru extinderea aplicatiei lasam method getLastChoice